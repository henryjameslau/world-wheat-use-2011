<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8">
<title>World wheat use in 2011</title>
<style>
@import url(style.css?aea6f0a);

body {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  position: relative;
  width: 960px;
}

path {
  stroke: #fff;
  fill-rule: evenodd;
}

</style>

    <script type="text/javascript" src="jquery-1.6.2.min.js"></script> 
    <script type="text/javascript" src="jquery.tipsy.js"></script>
	<link href="tipsy.css" rel="stylesheet" type="text/css" />

</head><body>
<h1>World wheat use in 2011</h1>
<p id="chart"></p>
<h2>How to read this graph</h2>
<p>The centre circle shows the total amount of wheat in 2011. The next circle out is made up of arcs for the 6 categories of use; food, food production, feed, seed, waste and other. The next layer out is broken down into 5 world regions for each use, before going down to individual countries. Move the mouse over each sector to read the amount of wheat in 1000 tonnes. Units are in 1000 metric tons.</p>

<p>Click on any arc to zoom in, and click on the center circle to zoom out.</p> 

<p>Adapted from <a href="http://bl.ocks.org/kerryrodden/477c1bfb081b783f80ad">zoomable sunburst with updating data</a>
<script src="wheat_use/d3.js"></script>
<script>

var width = 600,
    height = 700,
    radius = Math.min(width, height) / 2;

var x = d3.scale.linear()
    .range([0, 2 * Math.PI]);

var y = d3.scale.sqrt()
    .range([0, radius]);

var color = d3.scale.category20c();

var svg = d3.select("#chart").append("svg")
    .attr("width", width)
    .attr("height", height)
  .append("g")
    .attr("transform", "translate(" + width / 2 + "," + (height / 2 + 10) + ")");

var partition = d3.layout.partition()
    .sort(null)
    .value(function(d) { return 1; });

var arc = d3.svg.arc()
    .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x))); })
    .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))); })
    .innerRadius(function(d) { return Math.max(0, y(d.y)); })
    .outerRadius(function(d) { return Math.max(0, y(d.y + d.dy)); });

// Keep track of the node that is currently being displayed as the root.
var node;

d3.json("flare.json", function(error, root) {
  node = root;
  var value = function(d){return d.size;};
  var path = svg.datum(root).selectAll("path")
      .data(partition.value(value).nodes)
    .enter().append("path")
      .attr("d", arc)
      .style("fill", function(d) { return color((d.children ? d : d.parent).name); })
      .on("click", click)
      .each(stash);
	  	  //tipsy tooltip
	  $('path').tipsy({ 
        gravity: $.fn.tipsy.autoNS, 
        html: true,
        title: function() { 
		var d = this.__data__, c = d.name;
		return d.name + ", " + d.size; }});
	  

  function click(d) {
    node = d;
    path.transition()
      .duration(1000)
      .attrTween("d", arcTweenZoom(d));
  }
});

d3.select(self.frameElement).style("height", height + "px");

// Setup for switching data: stash the old values for transition.
function stash(d) {
  d.x0 = d.x;
  d.dx0 = d.dx;
}

// When switching data: interpolate the arcs in data space.
function arcTweenData(a, i) {
  var oi = d3.interpolate({x: a.x0, dx: a.dx0}, a);
  function tween(t) {
    var b = oi(t);
    a.x0 = b.x;
    a.dx0 = b.dx;
    return arc(b);
  }
  if (i == 0) {
   // If we are on the first arc, adjust the x domain to match the root node
   // at the current zoom level. (We only need to do this once.)
    var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]);
    return function(t) {
      x.domain(xd(t));
      return tween(t);
    };
  } else {
    return tween;
  }
}

// When zooming: interpolate the scales.
function arcTweenZoom(d) {
  var xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),
      yd = d3.interpolate(y.domain(), [d.y, 1]),
      yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]);
  return function(d, i) {
    return i
        ? function(t) { return arc(d); }
        : function(t) { x.domain(xd(t)); y.domain(yd(t)).range(yr(t)); return arc(d); };
  };
}

</script></body></html>